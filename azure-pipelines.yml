trigger:
  branches:
    include:
      - main
      - master
      - develop
  paths:
    exclude:
      - README.md
      - docs/**

pool:
  vmImage: 'ubuntu-latest'

variables:
  dotnetVersion: '8.0.x'
  nodeVersion: '20.x'
  buildConfiguration: 'Release'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: BuildBackend
        displayName: 'Build .NET Backend'
        steps:
          - task: UseDotNet@2
            displayName: 'Install .NET SDK'
            inputs:
              version: $(dotnetVersion)
              includePreviewVersions: false

          - task: DotNetCoreCLI@2
            displayName: 'Restore NuGet packages'
            inputs:
              command: 'restore'
              projects: 'backend-dotnet/*.csproj'

          - task: DotNetCoreCLI@2
            displayName: 'Build backend'
            inputs:
              command: 'build'
              projects: 'backend-dotnet/*.csproj'
              arguments: '--configuration $(buildConfiguration) --no-restore'

          - task: DotNetCoreCLI@2
            displayName: 'Run backend tests'
            inputs:
              command: 'test'
              projects: 'backend-dotnet/**/*Tests.csproj'
              arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

          - task: DotNetCoreCLI@2
            displayName: 'Publish backend'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: 'backend-dotnet/*.csproj'
              arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/backend'
              zipAfterPublish: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish backend artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/backend'
              ArtifactName: 'backend-drop'
              publishLocation: 'Container'

      - job: BuildFrontend
        displayName: 'Build Next.js Frontend'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(nodeVersion)

          - script: npm ci
            displayName: 'Install dependencies'

          - script: npm run lint
            displayName: 'Run ESLint'
            continueOnError: true

          - script: npm run type-check
            displayName: 'Run TypeScript type checking'

          - script: npm run build
            displayName: 'Build Next.js application'
            env:
              NODE_ENV: production

          - task: ArchiveFiles@2
            displayName: 'Archive frontend build'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/.next'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/frontend/nextjs-app.zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: 'Publish frontend artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/frontend'
              ArtifactName: 'frontend-drop'
              publishLocation: 'Container'

  - stage: Test
    displayName: 'Test Stage'
    dependsOn: Build
    jobs:
      - job: SecurityScan
        displayName: 'Security Scanning'
        steps:
          - task: UseDotNet@2
            inputs:
              version: $(dotnetVersion)

          - task: NodeTool@0
            inputs:
              versionSpec: $(nodeVersion)

          - script: npm ci
            displayName: 'Install dependencies'

          - script: npm audit --production
            displayName: 'NPM Security Audit'
            continueOnError: true

          - script: |
              dotnet list backend-dotnet/CloudGovDashboard.csproj package --vulnerable --include-transitive
            displayName: 'NuGet Vulnerability Check'
            continueOnError: true

  - stage: Deploy
    displayName: 'Deploy Stage'
    dependsOn: Test
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployToProduction
        displayName: 'Deploy to Production'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: backend-drop

                - download: current
                  artifact: frontend-drop

                - script: echo "Deploying to production environment..."
                  displayName: 'Deploy notification'

                # Add your actual deployment steps here
                # Examples:
                # - Azure App Service deployment
                # - AWS deployment
                # - Docker container deployment
                # - Kubernetes deployment
